name: Build Release Executable

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-windows:
    name: Build for Windows (Torch + CUDA)
    runs-on: windows-latest

    env:
      PYTHON_VERSION: '3.11'
      OUTPUT_NAME: twims_windows_${{ github.event.release.tag_name }}
      ZIP_NAME: twims_windows_${{ github.event.release.tag_name }}.zip
      MODEL_NAME: ggml.bin

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: windows-pip-${{ hashFiles('**/requirements-torch-cuda.txt') }}
          restore-keys: windows-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_faster.txt
          pip install git+https://github.com/openai/whisper.git
          pip install pyinstaller requests
        # pip install -r requirements_torch_cuda.txt

      - name: Download UPX (for compression)
        run: |
          curl -LO https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-win64.zip
          tar -xf upx-4.2.1-win64.zip
          mkdir upx && move upx-4.2.1-win64\* upx

      - name: Check CUDA availability
        run: python -c "import torch; print('CUDA available:', torch.cuda.is_available())"

      - name: Build with build.py (Torch)
        run: |
          python build.py --clean --engine=faster --output="${{ env.OUTPUT_NAME }}" --console
        # python build.py --clean --engine=torch --model-size=large --output="${{ env.OUTPUT_NAME }}" --console

      - name: Copy EXE to root for easier access
        run: |
          copy "dist\${{ env.OUTPUT_NAME }}\${{ env.OUTPUT_NAME }}.exe" "${{ env.OUTPUT_NAME }}.exe"

      - name: Copy ggml model if it exists
        shell: pwsh
        run: |
          if (Test-Path "dist/ggml.bin") {
            Copy-Item "dist/ggml.bin" "ggml.bin"
          }

      - name: Create ZIP archive of full dist folder
        run: |
          Compress-Archive -Path "dist\${{ env.OUTPUT_NAME }}\*" -DestinationPath "${{ env.ZIP_NAME }}"

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ZIP_NAME }}
            ${{ env.OUTPUT_NAME }}.exe
            ggml.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build-macos:
  #   name: Build for macOS (Whisper.cpp)
  #   runs-on: macos-latest

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.11'

  #     - name: Install Homebrew dependencies
  #       run: brew install portaudio ffmpeg

  #     - name: Install Python dependencies
  #       run: |
  #         pip install --upgrade pip
  #         pip install -r requirements-cpp.txt
  #         pip install pyinstaller requests

  #     - name: Build with build.py (Whisper.cpp)
  #       run: |
  #         python build.py --clean --engine=cpp --download-model \
  #           --model-url="https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-large-v3-turbo-q8_0.bin" \
  #           --model-name=ggml.bin --output="twims_macos_${{ github.event.release.tag_name }}" --console

  #     - name: Create ZIP archive
  #       run: zip -r "twims_macos_${{ github.event.release.tag_name }}.zip" dist/

  #     - name: Upload release asset
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         files: |
  #           twims_macos_${{ github.event.release.tag_name }}.zip
  #           dist/twims_macos_${{ github.event.release.tag_name }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}